# -*- coding: utf-8 -*-
"""WithoutEDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eYSnNZRX7vJv-WR8i9S_t0W4NbUiucsR
"""

import pandas as pd

class ProductBenchmarking:
    def __init__(self, dataframe):
        """Initialize with the given DataFrame."""
        self.df = dataframe

    def select_product(self, product_id):
        """Select a product by its ID."""
        self.selected_product = self.df.loc[product_id]
        print("Selected Product Details:")
        print(self.selected_product)

    def find_similar_products(self):
        """Find similar products based on category and subcategory."""
        if not hasattr(self, 'selected_product'):
            print("No product selected. Please select a product first.")
            return
        self.similar_products = self.df[(self.df['category'] == self.selected_product['category']) &
                                        (self.df['subcategory'] == self.selected_product['subcategory'])]
        print(f"\nFound {len(self.similar_products)} similar products.")

    def get_benchmark_data(self, num_products_to_display=3):
        """Fetch benchmark data for similar products and calculate profit margin."""
        if not hasattr(self, 'similar_products'):
            print("No similar products found. Please find similar products first.")
            return
        similar_products_limited = self.similar_products.head(num_products_to_display)
        benchmark_data = similar_products_limited[['productname', 'sellingprice', 'costprice', 'New Vendors']].copy()
        benchmark_data['profit_margin'] = benchmark_data['sellingprice'] - benchmark_data['costprice']

        self.benchmark_data = benchmark_data
        print("\nBenchmarking Data for Similar Products:")
        print(self.benchmark_data)

    def display_vendors(self):
        """List and sort vendors based on reliability score and delivery time."""
        if not hasattr(self, 'similar_products'):
            print("No similar products found. Please find similar products first.")
            return
        vendor_data = self.similar_products[['New Vendors', 'ReliabilityScore', 'DeliveryTime']].drop_duplicates()
        vendor_data_sorted = vendor_data.sort_values(by=['ReliabilityScore', 'DeliveryTime'], ascending=[False, True])
        self.vendor_data_sorted = vendor_data_sorted
        print("\nVendors for the Selected Product and Similar Products:")
        print(vendor_data_sorted)

